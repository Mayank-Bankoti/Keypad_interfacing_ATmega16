
Keypad_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c7  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000640  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f9  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037e  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000249  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 00 	call	0x104	; 0x104 <main>
  8a:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:
	LCD_cmd(0x0E); // Display on cursor on
}

void LCD_cmd(unsigned char Command)
{
	Dataout = Command;
  92:	8b bb       	out	0x1b, r24	; 27
	ctrl = (0<<RS)|(0<<RW)|(1<<EN); // RS=0 for instruction/command 
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8f e9       	ldi	r24, 0x9F	; 159
  9a:	9f e0       	ldi	r25, 0x0F	; 15
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_cmd+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_cmd+0x10>
  a2:	00 00       	nop
	_delay_ms(1);
	ctrl = (0<<RS)| (0<< RW)|(0<<EN);
  a4:	18 ba       	out	0x18, r1	; 24
  a6:	9f ef       	ldi	r25, 0xFF	; 255
  a8:	20 e7       	ldi	r18, 0x70	; 112
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	91 50       	subi	r25, 0x01	; 1
  ae:	20 40       	sbci	r18, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <LCD_cmd+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_cmd+0x24>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <LCD_init>:
void LCD_data(unsigned char Data);
void LCD_init(void);

void LCD_init(void)
{
	LCD_cmd(0x38); // 8bit mode
  ba:	88 e3       	ldi	r24, 0x38	; 56
  bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x06); // Entry mode
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x01);  // Clear Display
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x80); // 1st row and 1st position
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x0E); // Display on cursor on
  d2:	8e e0       	ldi	r24, 0x0E	; 14
  d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	_delay_ms(50);
}

void LCD_data(unsigned char Data)
{
	Dataout = Data;
  da:	8b bb       	out	0x1b, r24	; 27
	ctrl = (1<<RS)| (0<<RW)| (1<<EN);  // RS=1 for data
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	88 bb       	out	0x18, r24	; 24
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_data+0xa>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_data+0x10>
  ea:	00 00       	nop
	_delay_ms(1);
	ctrl = (1<<RS | (0<<RW)|(0<<EN));
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	20 e7       	ldi	r18, 0x70	; 112
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	20 40       	sbci	r18, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <LCD_data+0x1c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_data+0x26>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <main>:

unsigned char i;
unsigned char j;

int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	2e 97       	sbiw	r28, 0x0e	; 14
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
 11c:	8a bb       	out	0x1a, r24	; 26
	DDRD =0x0F;
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	81 bb       	out	0x11, r24	; 17
    LCD_init();
 122:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>

	unsigned char string[] = "Press any Key";
 126:	8e e0       	ldi	r24, 0x0E	; 14
 128:	e0 e6       	ldi	r30, 0x60	; 96
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	de 01       	movw	r26, r28
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	01 90       	ld	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	8a 95       	dec	r24
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x2c>
 138:	0d c0       	rjmp	.+26     	; 0x154 <main+0x50>
	while(1)
	{
    	while(string[i]!='\0')
    	{
	    	LCD_data(string[i]);
 13a:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
	    	i++;
 13e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <i>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <i>
 148:	8f e9       	ldi	r24, 0x9F	; 159
 14a:	9f e0       	ldi	r25, 0x0F	; 15
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x48>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x4e>
 152:	00 00       	nop
    LCD_init();

	unsigned char string[] = "Press any Key";
	while(1)
	{
    	while(string[i]!='\0')
 154:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <i>
 158:	e1 e0       	ldi	r30, 0x01	; 1
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ec 0f       	add	r30, r28
 15e:	fd 1f       	adc	r31, r29
 160:	e8 0f       	add	r30, r24
 162:	f1 1d       	adc	r31, r1
 164:	80 81       	ld	r24, Z
 166:	81 11       	cpse	r24, r1
 168:	e8 cf       	rjmp	.-48     	; 0x13a <main+0x36>
	    	LCD_data(string[i]);
	    	i++;
			_delay_ms(1);
    	}
		
		for (j=0; j<4; j++)
 16a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 16e:	8c c0       	rjmp	.+280    	; 0x288 <__EEPROM_REGION_LENGTH__+0x88>
		{
			PORTD = (0xF7>>j) | 0xF0;
 170:	87 ef       	ldi	r24, 0xF7	; 247
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <main+0x76>
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	2a 95       	dec	r18
 17c:	e2 f7       	brpl	.-8      	; 0x176 <main+0x72>
 17e:	80 6f       	ori	r24, 0xF0	; 240
 180:	82 bb       	out	0x12, r24	; 18
 182:	8f e9       	ldi	r24, 0x9F	; 159
 184:	9f e0       	ldi	r25, 0x0F	; 15
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x82>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x88>
 18c:	00 00       	nop
			_delay_ms(1);
			LCD_cmd(0xc0);
 18e:	80 ec       	ldi	r24, 0xC0	; 192
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
			
			if(PIND == 0xEE)
 194:	80 b3       	in	r24, 0x10	; 16
 196:	8e 3e       	cpi	r24, 0xEE	; 238
 198:	21 f4       	brne	.+8      	; 0x1a2 <main+0x9e>
			LCD_data('0');
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 1a0:	68 c0       	rjmp	.+208    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if (PIND ==0xDE)
 1a2:	80 b3       	in	r24, 0x10	; 16
 1a4:	8e 3d       	cpi	r24, 0xDE	; 222
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <main+0xac>
			LCD_data('1');
 1a8:	81 e3       	ldi	r24, 0x31	; 49
 1aa:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 1ae:	61 c0       	rjmp	.+194    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xBE)
 1b0:	80 b3       	in	r24, 0x10	; 16
 1b2:	8e 3b       	cpi	r24, 0xBE	; 190
 1b4:	21 f4       	brne	.+8      	; 0x1be <main+0xba>
			LCD_data('2');
 1b6:	82 e3       	ldi	r24, 0x32	; 50
 1b8:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 1bc:	5a c0       	rjmp	.+180    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0x7E)
 1be:	80 b3       	in	r24, 0x10	; 16
 1c0:	8e 37       	cpi	r24, 0x7E	; 126
 1c2:	21 f4       	brne	.+8      	; 0x1cc <main+0xc8>
			LCD_data('3');
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 1ca:	53 c0       	rjmp	.+166    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xED)
 1cc:	80 b3       	in	r24, 0x10	; 16
 1ce:	8d 3e       	cpi	r24, 0xED	; 237
 1d0:	21 f4       	brne	.+8      	; 0x1da <main+0xd6>
			LCD_data('4');
 1d2:	84 e3       	ldi	r24, 0x34	; 52
 1d4:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 1d8:	4c c0       	rjmp	.+152    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xDD)
 1da:	80 b3       	in	r24, 0x10	; 16
 1dc:	8d 3d       	cpi	r24, 0xDD	; 221
 1de:	21 f4       	brne	.+8      	; 0x1e8 <main+0xe4>
			LCD_data('5');
 1e0:	85 e3       	ldi	r24, 0x35	; 53
 1e2:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 1e6:	45 c0       	rjmp	.+138    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xBD)
 1e8:	80 b3       	in	r24, 0x10	; 16
 1ea:	8d 3b       	cpi	r24, 0xBD	; 189
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <main+0xf2>
			LCD_data('6');
 1ee:	86 e3       	ldi	r24, 0x36	; 54
 1f0:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 1f4:	3e c0       	rjmp	.+124    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0x7D)
 1f6:	80 b3       	in	r24, 0x10	; 16
 1f8:	8d 37       	cpi	r24, 0x7D	; 125
 1fa:	21 f4       	brne	.+8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
			LCD_data('7');
 1fc:	87 e3       	ldi	r24, 0x37	; 55
 1fe:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 202:	37 c0       	rjmp	.+110    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xEB)
 204:	80 b3       	in	r24, 0x10	; 16
 206:	8b 3e       	cpi	r24, 0xEB	; 235
 208:	21 f4       	brne	.+8      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
			LCD_data('8');
 20a:	88 e3       	ldi	r24, 0x38	; 56
 20c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 210:	30 c0       	rjmp	.+96     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xDB)
 212:	80 b3       	in	r24, 0x10	; 16
 214:	8b 3d       	cpi	r24, 0xDB	; 219
 216:	21 f4       	brne	.+8      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
			LCD_data('9');		
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 21e:	29 c0       	rjmp	.+82     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xBB)
 220:	80 b3       	in	r24, 0x10	; 16
 222:	8b 3b       	cpi	r24, 0xBB	; 187
 224:	21 f4       	brne	.+8      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
			LCD_data('A');
 226:	81 e4       	ldi	r24, 0x41	; 65
 228:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 22c:	22 c0       	rjmp	.+68     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0x7B)
 22e:	80 b3       	in	r24, 0x10	; 16
 230:	8b 37       	cpi	r24, 0x7B	; 123
 232:	21 f4       	brne	.+8      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
			LCD_data('B');
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 23a:	1b c0       	rjmp	.+54     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xE7)
 23c:	80 b3       	in	r24, 0x10	; 16
 23e:	87 3e       	cpi	r24, 0xE7	; 231
 240:	21 f4       	brne	.+8      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
			LCD_data('C');
 242:	83 e4       	ldi	r24, 0x43	; 67
 244:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 248:	14 c0       	rjmp	.+40     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xD7)
 24a:	80 b3       	in	r24, 0x10	; 16
 24c:	87 3d       	cpi	r24, 0xD7	; 215
 24e:	21 f4       	brne	.+8      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
			LCD_data('D');
 250:	84 e4       	ldi	r24, 0x44	; 68
 252:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 256:	0d c0       	rjmp	.+26     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0xB7)
 258:	80 b3       	in	r24, 0x10	; 16
 25a:	87 3b       	cpi	r24, 0xB7	; 183
 25c:	21 f4       	brne	.+8      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
			LCD_data('E');
 25e:	85 e4       	ldi	r24, 0x45	; 69
 260:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
 264:	06 c0       	rjmp	.+12     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			else if(PIND ==0x77)
 266:	80 b3       	in	r24, 0x10	; 16
 268:	87 37       	cpi	r24, 0x77	; 119
 26a:	19 f4       	brne	.+6      	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			LCD_data('F');
 26c:	86 e4       	ldi	r24, 0x46	; 70
 26e:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
			if (j==4)
 272:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 276:	84 30       	cpi	r24, 0x04	; 4
 278:	11 f4       	brne	.+4      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
			{
				j=0;
 27a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
	    	LCD_data(string[i]);
	    	i++;
			_delay_ms(1);
    	}
		
		for (j=0; j<4; j++)
 27e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 288:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <__data_end>
 28c:	24 30       	cpi	r18, 0x04	; 4
 28e:	08 f4       	brcc	.+2      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 290:	6f cf       	rjmp	.-290    	; 0x170 <main+0x6c>
 292:	60 cf       	rjmp	.-320    	; 0x154 <main+0x50>

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
